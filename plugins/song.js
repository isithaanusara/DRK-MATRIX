const {cmd , commands} = require('../command')
const fetch = require('node-fetch')
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, runtime, sleep, fetchJson} = require('../lib/functions')
const axios = require('axios');
const yts = require("yt-search")
const API = `https://manu-ofc-api-site-6bfcbe0e18f6.herokuapp.com/ytmp3-dl-fixed?url=` // ‡∂∏‡∂ß ‡∂∏‡∑ê‡∑É‡∑ö‡∂¢‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑è‡∂Ω ‡∂â‡∂Ω‡∑ä‡∂Ω‡∂ú‡∂±‡∑ä‡∂±...üòé‚ù§Ô∏è ( +94 74 227 4855 )
cmd({
    pattern: "song",
    alias: ["audio"],
    desc: 'Download Song / Video',
    use: '.play Title',
    react: "üéß",
    category: 'download',
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
      
        
        if (!q) return reply('Please provide a title.');

        const search = await yts(q);
        const data = search.videos[0];
        const url = data.url;

        let desc = `*üíöüéµ SONG ùêÉùêéùêñùêçùêãùêéùêÄùêÉùêÑùêë üéµüíö*
      
> *\`‚û§ Title\` :* ${data.title}

> *\`‚û§ Views\` :* ${data.views}

> *\`‚û§ DESCRIPTION\`:* ${data.description}

> *\`‚û§ TIME\`:* ${data.timestamp}

> *\`‚û§ AGO\`:* ${data.ago}

1. Audio 
2. Document

> ¬© Ä·¥á-·¥Ñ·¥è·¥Ö·¥á·¥Ö  ô è ·¥Ñ Ä è·¥ò·¥õ·¥è ·¥ã…¥…™…¢ ú·¥õ
        `;

        const vv = await conn.sendMessage(from, { image: { url: data.thumbnail }, caption: desc }, { quoted: mek });

        conn.ev.on('messages.upsert', async (msgUpdate) => {
            const msg = msgUpdate.messages[0];
            if (!msg.message || !msg.message.extendedTextMessage) return;

            const selectedOption = msg.message.extendedTextMessage.text.trim();

            if (msg.message.extendedTextMessage.contextInfo && msg.message.extendedTextMessage.contextInfo.stanzaId === vv.key.id) {
                switch (selectedOption) {
                    case '1':
                        // Fetch Audio from API
                        const audioData = await fetch(`${API}${data.url}`);
                        const audioJson = await audioData.json();
                        const audioDownloadUrl = audioJson.data[2].downloadUrl;  // Assuming you want 128kbps quality

                        // Send Audio
                        await conn.sendMessage(from, { 
                            audio: { url: audioDownloadUrl }, 
                            mimetype: "audio/mpeg", 
                            caption: "> ¬© Ä·¥á-·¥Ñ·¥è·¥Ö·¥á·¥Ö  ô è ·¥Ñ Ä è·¥ò·¥õ·¥è ·¥ã…¥…™…¢ ú·¥õ" 
                        }, { quoted: mek });
                        break;
       
                    case '2':
                        // Fetch Audio from API
                        const docData = await fetch(`{https://manu-ofc-api-site-6bfcbe0e18f6.herokuapp.com/ytmp3-dl-fixed?url=}`);
                        const docJson = await docData.json();
                        const docDownloadUrl = docJson.data[2].downloadUrl;  // Assuming you want 128kbps quality

                        // Send Document
                        await conn.sendMessage(from, { 
                            document: { url: docDownloadUrl },
                            mimetype: "audio/mpeg", 
                            fileName: `${data.title}.mp3`, 
                            caption: "> ¬© Ä·¥á-·¥Ñ·¥è·¥Ö·¥á·¥Ö  ô è ·¥Ñ Ä è·¥ò·¥õ·¥è ·¥ã…¥…™…¢ ú·¥õ" 
                        }, { quoted: mek });
                        break;
 
                    default:
                        reply("Invalid option. Please select a valid option üíó");
                }
            }
        });

    } catch (e) {
        console.error(e);
        await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } });
        reply('An error occurred while processing your request.');
    }
});
